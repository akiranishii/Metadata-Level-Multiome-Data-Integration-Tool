})
# Filter proteomics data
filtered_proteomics_data <- reactive({
if (input$proteomics_dataset == "All datasets") {
proteomics_combined <- bind_rows(proteomics_data())
} else {
proteomics_combined <- proteomics_data()[[input$proteomics_dataset]]
}
if (input$proteomics_search_symbol != "") {
proteomics_combined <- proteomics_combined %>% filter(grepl(tolower(input$proteomics_search_symbol), tolower(Symbol), fixed = TRUE))
}
proteomics_combined <- proteomics_combined %>% filter(abs(log2FoldChange) >= input$proteomics_log2FC_threshold, padj <= input$proteomics_padj_threshold)
proteomics_combined
})
# Update dataset selection input
observe({
updateSelectInput(session, "proteomics_dataset",
choices = c("All datasets", gsub(".csv", "", basename(list.files("proteomics", pattern = "*.csv")))),
selected = "All datasets")
})
# Render proteomics table
output$proteomics_table <- renderDT({
datatable(filtered_proteomics_data(),
options = list(lengthMenu = c(5, 10, 20, 50), pageLength = 10))
})
}
# Run the application
auth0::shinyAppAuth0(ui, server)
# Load additional required package
if (!requireNamespace("purrr", quietly = TRUE)) {
install.packages("purrr")
install.packages("DT")
install.packages("plotly")
}
library(purrr)
library(stringr)
library(DT)
library(tidyverse)
library(plotly)
library(shiny)
# Update UI
ui <- fluidPage(
titlePanel("RNA-seq, Proteomics, and Lipidomics Data Explorer"),
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabs === 'Metadata'",
selectInput("experiment_type",
"Experiment type:",
c("All", "Bulk RNA-seq", "Proteomics", "Lipidomics"),
selected = "All"),
selectInput("species",
"Species:",
c("All", "Mouse", "Human"),
selected = "All"),
textInput("search_id", "Search by ID:", ""),
actionButton("filter_data", "Filter"),
checkboxInput("show_exp_design", "Show experimental design", value = FALSE)
),
conditionalPanel(condition = "input.tabs === 'RNA-seq'",
selectInput("rnaseq_dataset", "Select RNA-seq dataset:", NULL),
textInput("rnaseq_search_symbol", "Search by Symbol:", ""),
numericInput("rnaseq_log2FC_threshold", "min log2FoldChange Threshold:", 0),
numericInput("rnaseq_padj_threshold", "max padj Threshold:", 0.05, min = 0, max = 1, step = 0.01)
),
conditionalPanel(condition = "input.tabs === 'Proteomics'",
selectInput("proteomics_dataset", "Select Proteomics dataset:", NULL),
textInput("proteomics_search_symbol", "Search by Symbol:", ""),
numericInput("proteomics_log2FC_threshold", "min log2FoldChange Threshold:", 0),
numericInput("proteomics_padj_threshold", "max padj Threshold:", 0.05, min = 0, max = 1, step = 0.01)
),
auth0::logoutButton()
),
mainPanel(
tabsetPanel(id = "tabs",
tabPanel("Metadata",
DTOutput("metadata_table")),
tabPanel("RNA-seq",
DTOutput("rnaseq_table"),
div(style = "height: 20px;"),
checkboxInput("show_plot", "MA plot (will not work for 'All datasets')", value = FALSE),
plotlyOutput("rnaseq_plot")),
tabPanel("Proteomics",
DTOutput("proteomics_table"),
div(style = "height: 20px;"))
)
)
)
)
# Update server logic
server <- function(input, output, session) {
# Read metadata file
metadata <- reactiveFileReader(1000, NULL, "metadata.csv", read.csv)
# Filter metadata
filtered_metadata <- eventReactive(input$filter_data, {
temp_metadata <- metadata()
if (input$experiment_type != "All") {
temp_metadata <- temp_metadata %>% filter(Experiment.type == input$experiment_type)
}
if (input$species != "All") {
temp_metadata <- temp_metadata %>% filter(Species == input$species)
}
if (input$search_id != "") {
temp_metadata <- temp_metadata %>% filter(grepl(tolower(input$search_id), tolower(ID), fixed = TRUE))
}
temp_metadata
}, ignoreNULL = FALSE)
# Render metadata table
output$metadata_table <- renderDT({
filtered <- filtered_metadata()
if (!input$show_exp_design) {
filtered <- filtered %>% select(-Experimental.design)
}
datatable(filtered,
options = list(lengthMenu = c(5, 10, 20, 50), pageLength = 10))
})
# Read RNA-seq datasets
rna_seq_data <- reactive({
rna_seq_files <- list.files("rna-seq", pattern = "*.csv", full.names = TRUE)
rna_seq_list <- lapply(rna_seq_files, function(x) {
rnaseq_dataset <- read.csv(x)
rnaseq_dataset$ID <- gsub(".csv", "", basename(x))
rnaseq_dataset
})
rna_seq_list <- setNames(rna_seq_list, gsub(".csv", "", basename(rna_seq_files)))
rna_seq_list
})
# Filter RNA-seq data
filtered_rnaseq_data <- reactive({
if (input$rnaseq_dataset == "All datasets") {
rna_seq_combined <- bind_rows(rna_seq_data())
} else {
rna_seq_combined <- rna_seq_data()[[input$rnaseq_dataset]]
}
if (input$rnaseq_search_symbol != "") {
rna_seq_combined <- rna_seq_combined %>% filter(grepl(tolower(input$rnaseq_search_symbol), tolower(Symbol), fixed = TRUE))
}
rna_seq_combined <- rna_seq_combined %>% filter(abs(log2FoldChange) >= input$rnaseq_log2FC_threshold, padj <= input$rnaseq_padj_threshold)
rna_seq_combined
})
# Update dataset selection input
observe({
updateSelectInput(session, "rnaseq_dataset",
choices = c("All datasets", gsub(".csv", "", basename(list.files("rna-seq", pattern = "*.csv")))),
selected = "All datasets")
})
# Render RNA-seq table
output$rnaseq_table <- renderDT({
datatable(filtered_rnaseq_data(),
options = list(lengthMenu = c(5, 10, 20, 50), pageLength = 10))
})
# return plot data
plot_data <- reactive({
if (input$rnaseq_dataset == "All datasets") {
return(NULL)
} else {
data <- rna_seq_data()[[input$rnaseq_dataset]]
data <- data %>% mutate(log2bm = log2(baseMean + 1))
plot_data <- data %>% select(Symbol, log2FoldChange, padj, log2bm)
plot_data["group"] <- "NotSignificant(p>0.05)"
plot_data[which(plot_data['padj'] < 0.05 & plot_data['log2FoldChange'] < 0 ),"group"] <- "Down(p<0.05 & log2FC<0)"
plot_data[which(plot_data['padj'] < 0.05 & plot_data['log2FoldChange'] > 0 ),"group"] <- "Up(p<0.05 & log2FC>0)"
plot_data["selected"] <- "Not Selected"
plot_data[which(grepl(tolower(input$rnaseq_search_symbol), tolower(plot_data[['Symbol']]), fixed = TRUE)),"selected"] <- "Selected"
return(plot_data)
}
})
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "log2 mean expression",
titlefont = f
)
y <- list(
title = "log2 fold change",
titlefont = f
)
# render plot
output$rnaseq_plot <- renderPlotly({
if (input$show_plot) {
if (is.null(plot_data())) {
return(NULL)
} else {
plot_ly(data = plot_data(), x = ~log2bm, y = ~log2FoldChange, text = ~paste("Gene name: ", Symbol, '<br>log2FC:', log2FoldChange,
'<br>log2meanexpression:', log2bm, '<br>P:', padj), mode = "markers", color = ~group, symbols = ~selected) %>% layout(title = paste(input$rnaseq_dataset, "MA_plot"), xaxis = x, yaxis = y)
}
} else {
return(NULL)
}
})
# Read proteomics datasets
proteomics_data <- reactive({
proteomics_files <- list.files("proteomics", pattern = "*.csv", full.names = TRUE)
proteomics_list <- lapply(proteomics_files, function(x) {
proteomics_dataset <- read.csv(x)
proteomics_dataset$ID <- gsub(".csv", "", basename(x))
proteomics_dataset
})
proteomics_list <- setNames(proteomics_list, gsub(".csv", "", basename(proteomics_files)))
proteomics_list
})
# Filter proteomics data
filtered_proteomics_data <- reactive({
if (input$proteomics_dataset == "All datasets") {
proteomics_combined <- bind_rows(proteomics_data())
} else {
proteomics_combined <- proteomics_data()[[input$proteomics_dataset]]
}
if (input$proteomics_search_symbol != "") {
proteomics_combined <- proteomics_combined %>% filter(grepl(tolower(input$proteomics_search_symbol), tolower(Symbol), fixed = TRUE))
}
proteomics_combined <- proteomics_combined %>% filter(abs(log2FoldChange) >= input$proteomics_log2FC_threshold, padj <= input$proteomics_padj_threshold)
proteomics_combined
})
# Update dataset selection input
observe({
updateSelectInput(session, "proteomics_dataset",
choices = c("All datasets", gsub(".csv", "", basename(list.files("proteomics", pattern = "*.csv")))),
selected = "All datasets")
})
# Render proteomics table
output$proteomics_table <- renderDT({
datatable(filtered_proteomics_data(),
options = list(lengthMenu = c(5, 10, 20, 50), pageLength = 10))
})
}
# Run the application
auth0::shinyAppAuth0(ui, server)
runApp('multiome_app.R')
library(shiny)
ui <- fluidPage(
fluidRow(plotOutput("plot")),
auth0::logoutButton()
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(1:10)
})
}
# note that here we're using a different version of shinyApp!
auth0::shinyAppAuth0(ui, server)
# Load additional required package
if (!requireNamespace("purrr", quietly = TRUE)) {
install.packages("purrr")
install.packages("DT")
install.packages("plotly")
}
library(purrr)
library(stringr)
library(DT)
library(tidyverse)
library(plotly)
library(shiny)
# Update UI
ui <- fluidPage(
titlePanel("RNA-seq, Proteomics, and Lipidomics Data Explorer"),
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabs === 'Metadata'",
selectInput("experiment_type",
"Experiment type:",
c("All", "Bulk RNA-seq", "Proteomics", "Lipidomics"),
selected = "All"),
selectInput("species",
"Species:",
c("All", "Mouse", "Human"),
selected = "All"),
textInput("search_id", "Search by ID:", ""),
actionButton("filter_data", "Filter"),
checkboxInput("show_exp_design", "Show experimental design", value = FALSE)
),
conditionalPanel(condition = "input.tabs === 'RNA-seq'",
selectInput("rnaseq_dataset", "Select RNA-seq dataset:", NULL),
textInput("rnaseq_search_symbol", "Search by Symbol:", ""),
numericInput("rnaseq_log2FC_threshold", "min log2FoldChange Threshold:", 0),
numericInput("rnaseq_padj_threshold", "max padj Threshold:", 0.05, min = 0, max = 1, step = 0.01)
),
conditionalPanel(condition = "input.tabs === 'Proteomics'",
selectInput("proteomics_dataset", "Select Proteomics dataset:", NULL),
textInput("proteomics_search_symbol", "Search by Symbol:", ""),
numericInput("proteomics_log2FC_threshold", "min log2FoldChange Threshold:", 0),
numericInput("proteomics_padj_threshold", "max padj Threshold:", 0.05, min = 0, max = 1, step = 0.01)
),
auth0::logoutButton()
),
mainPanel(
tabsetPanel(id = "tabs",
tabPanel("Metadata",
DTOutput("metadata_table")),
tabPanel("RNA-seq",
DTOutput("rnaseq_table"),
div(style = "height: 20px;"),
checkboxInput("show_plot", "MA plot (will not work for 'All datasets')", value = FALSE),
plotlyOutput("rnaseq_plot")),
tabPanel("Proteomics",
DTOutput("proteomics_table"),
div(style = "height: 20px;"))
)
)
)
)
# Update server logic
server <- function(input, output, session) {
# Read metadata file
metadata <- reactiveFileReader(1000, NULL, "metadata.csv", read.csv)
# Filter metadata
filtered_metadata <- eventReactive(input$filter_data, {
temp_metadata <- metadata()
if (input$experiment_type != "All") {
temp_metadata <- temp_metadata %>% filter(Experiment.type == input$experiment_type)
}
if (input$species != "All") {
temp_metadata <- temp_metadata %>% filter(Species == input$species)
}
if (input$search_id != "") {
temp_metadata <- temp_metadata %>% filter(grepl(tolower(input$search_id), tolower(ID), fixed = TRUE))
}
temp_metadata
}, ignoreNULL = FALSE)
# Render metadata table
output$metadata_table <- renderDT({
filtered <- filtered_metadata()
if (!input$show_exp_design) {
filtered <- filtered %>% select(-Experimental.design)
}
datatable(filtered,
options = list(lengthMenu = c(5, 10, 20, 50), pageLength = 10))
})
# Read RNA-seq datasets
rna_seq_data <- reactive({
rna_seq_files <- list.files("rna-seq", pattern = "*.csv", full.names = TRUE)
rna_seq_list <- lapply(rna_seq_files, function(x) {
rnaseq_dataset <- read.csv(x)
rnaseq_dataset$ID <- gsub(".csv", "", basename(x))
rnaseq_dataset
})
rna_seq_list <- setNames(rna_seq_list, gsub(".csv", "", basename(rna_seq_files)))
rna_seq_list
})
# Filter RNA-seq data
filtered_rnaseq_data <- reactive({
if (input$rnaseq_dataset == "All datasets") {
rna_seq_combined <- bind_rows(rna_seq_data())
} else {
rna_seq_combined <- rna_seq_data()[[input$rnaseq_dataset]]
}
if (input$rnaseq_search_symbol != "") {
rna_seq_combined <- rna_seq_combined %>% filter(grepl(tolower(input$rnaseq_search_symbol), tolower(Symbol), fixed = TRUE))
}
rna_seq_combined <- rna_seq_combined %>% filter(abs(log2FoldChange) >= input$rnaseq_log2FC_threshold, padj <= input$rnaseq_padj_threshold)
rna_seq_combined
})
# Update dataset selection input
observe({
updateSelectInput(session, "rnaseq_dataset",
choices = c("All datasets", gsub(".csv", "", basename(list.files("rna-seq", pattern = "*.csv")))),
selected = "All datasets")
})
# Render RNA-seq table
output$rnaseq_table <- renderDT({
datatable(filtered_rnaseq_data(),
options = list(lengthMenu = c(5, 10, 20, 50), pageLength = 10))
})
# return plot data
plot_data <- reactive({
if (input$rnaseq_dataset == "All datasets") {
return(NULL)
} else {
data <- rna_seq_data()[[input$rnaseq_dataset]]
data <- data %>% mutate(log2bm = log2(baseMean + 1))
plot_data <- data %>% select(Symbol, log2FoldChange, padj, log2bm)
plot_data["group"] <- "NotSignificant(p>0.05)"
plot_data[which(plot_data['padj'] < 0.05 & plot_data['log2FoldChange'] < 0 ),"group"] <- "Down(p<0.05 & log2FC<0)"
plot_data[which(plot_data['padj'] < 0.05 & plot_data['log2FoldChange'] > 0 ),"group"] <- "Up(p<0.05 & log2FC>0)"
plot_data["selected"] <- "Not Selected"
plot_data[which(grepl(tolower(input$rnaseq_search_symbol), tolower(plot_data[['Symbol']]), fixed = TRUE)),"selected"] <- "Selected"
return(plot_data)
}
})
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "log2 mean expression",
titlefont = f
)
y <- list(
title = "log2 fold change",
titlefont = f
)
# render plot
output$rnaseq_plot <- renderPlotly({
if (input$show_plot) {
if (is.null(plot_data())) {
return(NULL)
} else {
plot_ly(data = plot_data(), x = ~log2bm, y = ~log2FoldChange, text = ~paste("Gene name: ", Symbol, '<br>log2FC:', log2FoldChange,
'<br>log2meanexpression:', log2bm, '<br>P:', padj), mode = "markers", color = ~group, symbols = ~selected) %>% layout(title = paste(input$rnaseq_dataset, "MA_plot"), xaxis = x, yaxis = y)
}
} else {
return(NULL)
}
})
# Read proteomics datasets
proteomics_data <- reactive({
proteomics_files <- list.files("proteomics", pattern = "*.csv", full.names = TRUE)
proteomics_list <- lapply(proteomics_files, function(x) {
proteomics_dataset <- read.csv(x)
proteomics_dataset$ID <- gsub(".csv", "", basename(x))
proteomics_dataset
})
proteomics_list <- setNames(proteomics_list, gsub(".csv", "", basename(proteomics_files)))
proteomics_list
})
# Filter proteomics data
filtered_proteomics_data <- reactive({
if (input$proteomics_dataset == "All datasets") {
proteomics_combined <- bind_rows(proteomics_data())
} else {
proteomics_combined <- proteomics_data()[[input$proteomics_dataset]]
}
if (input$proteomics_search_symbol != "") {
proteomics_combined <- proteomics_combined %>% filter(grepl(tolower(input$proteomics_search_symbol), tolower(Symbol), fixed = TRUE))
}
proteomics_combined <- proteomics_combined %>% filter(abs(log2FoldChange) >= input$proteomics_log2FC_threshold, padj <= input$proteomics_padj_threshold)
proteomics_combined
})
# Update dataset selection input
observe({
updateSelectInput(session, "proteomics_dataset",
choices = c("All datasets", gsub(".csv", "", basename(list.files("proteomics", pattern = "*.csv")))),
selected = "All datasets")
})
# Render proteomics table
output$proteomics_table <- renderDT({
datatable(filtered_proteomics_data(),
options = list(lengthMenu = c(5, 10, 20, 50), pageLength = 10))
})
}
# Run the application
auth0::shinyAppAuth0(ui, server)
getwd()
rsconnect::deployApp("/Users/akiranishii/Desktop/Research/Metadata-Level-Multiome-Data-Integration-Tool")
list.files()
rsconnect::deployApp(appFile = "multiome_app.R")
rsconnect::deployApp(appDir = "/Users/akiranishii/Desktop/Research/Metadata-Level-Multiome-Data-Integration-Tool")
list.files()
library(rsconnect)
deployApp()
deployApp()
deployApp()
library(rsconnect)
deployApp()
deployApp(app.R)
deployApp("app.R")
list.files()
rsconnect::setAccountInfo(name='akiranishii', token='92828D3661B36AACE3739932E32B5F0C', secret='izJ3hKpuTzdLVV1aZLhL4ihpYtNixaTBviN4eWOX')
shiny::runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='akiranishii', token='9D0E4BF07F06DCF8388559BE1FD430A6', secret='sdgykw1p6EPxq4mUuX43c44DkhB+dcW84Cg8y9el')
shiny::runApp()
rsconnect::setAccountInfo(name='akiranishii', token='9D0E4BF07F06DCF8388559BE1FD430A6', secret='sdgykw1p6EPxq4mUuX43c44DkhB+dcW84Cg8y9el')
runApp()
options(shiny.port=8080)
auth0::use_auth0()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp()
runApp()
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp(port = 8080)
runApp(port = 8080)
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp(port = 8080)
runApp(port = 8080)
runApp(port = 8080)
runApp()
runApp(port = 8080)
runApp()
runApp()
runApp(port = 8080)
runApp(port = 8080)
runApp(port = 8080)
runApp(port = 8080)
