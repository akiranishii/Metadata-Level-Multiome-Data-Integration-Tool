library(shiny); runApp('interactive_app.R')
# Load required libraries
library(tidyverse)
# Set the path to the folder containing the CSV files
folder_path <- "rna-seq/"
output_folder_path <- "modified_rna-seq/"
# Create the output folder if it doesn't exist
if (!dir.exists(output_folder_path)) {
dir.create(output_folder_path)
}
# List all CSV files in the folder
csv_files <- list.files(folder_path, pattern = "\\.csv$")
# Function to add ID and type columns, reorder the columns, and save the updated CSV
process_csv <- function(file_name) {
# Read the CSV file
data <- read_csv(paste0(folder_path, file_name))
# Remove the file extension to get the ID
file_id <- tools::file_path_sans_ext(file_name)
# Add the ID and type columns
data <- data %>%
mutate(ID = file_id, type = "RNA")
# Check if the columns are as expected
expected_columns <- c("ID", "Symbol", "baseMean", "log2FoldChange", "padj", "type")
extra_columns <- setdiff(colnames(data), expected_columns)
if (length(extra_columns) > 0) {
stop(paste0("Error: Extra columns found in ", file_name, ": ", paste(extra_columns, collapse = ", ")))
}
# Convert the columns to the correct data types
data <- data %>%
mutate(
ID = as.character(ID),
Symbol = as.character(Symbol),
baseMean = as.numeric(baseMean),
log2FoldChange = as.numeric(log2FoldChange),
padj = as.numeric(padj),
type = as.character(type)
)
# Reorder the columns
data <- data %>%
select(ID, Symbol, baseMean, log2FoldChange, padj, type)
# Save the updated DataFrame as a new CSV file in the output folder
write_csv(data, paste0(output_folder_path, file_id, ".csv"))
}
# Apply the function to all CSV files in the folder
lapply(csv_files, process_csv)
library(shiny); runApp('app_part2.R')
runApp('app_part2.R')
runApp('app_part2.R')
library(shiny); runApp('app_part2.R')
